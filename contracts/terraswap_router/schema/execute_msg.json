{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Execute multiple BuyOperation",
      "type": "object",
      "required": [
        "execute_swap_operations"
      ],
      "properties": {
        "execute_swap_operations": {
          "type": "object",
          "required": [
            "operations"
          ],
          "properties": {
            "minimum_receive": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "operations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            },
            "to": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Internal use Swap all offer tokens to ask token",
      "type": "object",
      "required": [
        "execute_swap_operation"
      ],
      "properties": {
        "execute_swap_operation": {
          "type": "object",
          "required": [
            "operation"
          ],
          "properties": {
            "operation": {
              "$ref": "#/definitions/SwapOperation"
            },
            "to": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Internal use Check the swap amount is exceed minimum_receive",
      "type": "object",
      "required": [
        "assert_minimum_receive"
      ],
      "properties": {
        "assert_minimum_receive": {
          "type": "object",
          "required": [
            "asset_info",
            "minimum_receive",
            "prev_balance",
            "receiver"
          ],
          "properties": {
            "asset_info": {
              "$ref": "#/definitions/AssetInfo"
            },
            "minimum_receive": {
              "$ref": "#/definitions/Uint128"
            },
            "prev_balance": {
              "$ref": "#/definitions/Uint128"
            },
            "receiver": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "SwapOperation": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "terra_swap"
          ],
          "properties": {
            "terra_swap": {
              "type": "object",
              "required": [
                "ask_asset_info",
                "offer_asset_info"
              ],
              "properties": {
                "ask_asset_info": {
                  "$ref": "#/definitions/AssetInfo"
                },
                "offer_asset_info": {
                  "$ref": "#/definitions/AssetInfo"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
